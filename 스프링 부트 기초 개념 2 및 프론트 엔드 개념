
# 스프링 부트 기초


### 문자 전송과 URL 인코딩

  - 'A'을 웹 브라우저에 입력하면 변환하지 않고 보낸다.
    - 영어는 변환하지 않는다.
    - 영어, 숫자, 특수 문자를 제외 나머지 문자는 변환
  - '가'를 웹 브라우저에 입력하면 "%EA%BO%80"으로 RFC3986 명세에 따라 퍼센트 인코딩으로 변환한다.
    - 이렇게 변환된 퍼센트 인코딩은 UTF-8 -> UTF-16으로 변환 후 사용자에게 다시 '가'로 표현된다.

### 스프링부트가 문자열을 Primitive Type으로 별환하는 방법

  - Primitive type : byte, short, int, long, float, double, boolean, char
    1. 웹 브라우저에서 Query String 값을 스프링 부트로 보낸다
    2. 스프링 부트에서 값에 맞는 Type.valueOf(" ")를 이용해서 해당 Type으로 변환 후 App에서 작업

### 웹브라우저와 스프링부트, 내부 App 연동 과정

  1. 사용자가 웹 브라우저에서 html 요청
  2. 스프링 부트에서 읽고 요청 html 웹 브라우저로 응답
  3. 사용자 측 화면 출력
  4. 사용자 측 웹 브라우저에서 값 입력 및 연산 버튼 클릭 
  5. 스프링부트에서 해당 기능 요청 수신
  6. 요청 받은 기능 실행 후 스프링 부트로 리턴
  7. 스프링 부트에서 웹브라우저로 응답
  8. 결과값 출력
 

## 서버 렌더링과 클라이언트 렌더링

### 서버 렌더링

  - 서버 렌더링 : 서버에서 HTML을 만들어 웹 브라우저에게 보내주는 것
  - 서버 렌더링 진행 순서
    1. 웹 브라우저에서 스프링 부트로 경로 및 값 전달
    2. 스프링부트에서 해당 경로로 전달
    3. 작업 수행 후 스프링 부트로 변경된 HTML을 전달
    4. 스프링 부트에서 웹 브라우저로 응답
    5. 서버가 보낸 HTML을 출력

### 클라이언트 렌더링

  - 클라이언트 렌더링 : 서버에서는 값만 받고 HTML을 클라이언트 측에서 변경
  - 클라이언트 렌더링 진행 순서
    1. 웹 브라우저에서 스프링 부트로 경로 및 값을 전달
    2. 스프링 부트에서 해당 경로로 전달
    3. 내부에서 작업 수행 후 스프링부트로 결과 값 전달
    4. 스프링부트에서 웹 브라우저로 결과 값 응답
    5. 서버가 보낸 결과값을 가지고 HTML 생성/변경/삭제 해서 화면 출력

## 메서드의 UML 표기법

  - UML (= Unified(통합된) Modeling(표기) Language(법)) : 분석 / 설계 내용을 글과 그림으로 표현한 것

  - 기본 함수 표기법
  - String toString (int i) { ... }
    - String : 기능을 수행한 후 리턴하는 값의 타입 = 리턴 타입
    - toString : 기능명 = function = method 
    - (int i) : 기능을 수행하는데 필요한 값을 받은 변수 = "파라미터"
      - 넘겨주는 값 = "아규먼트"(argument)
  
  - UML 표기법 : toString(i:int) : String
  

### 태그 용어

  - ```<h1 id = "x-title"> 제목1 </h1>```
    - ```<h1 id = "x-title"> : 시작 태그```
      - h1 : 태그명
      - id : 속성명(attribute)
      - "x-title" : 속성값
    - 제목1 : 콘텐트
    - </h1> : 끝 태그
  - <input readonly>
    - input : 입력창 태그
    - readonly : 값을 생략할 수 있는 속성, 값을 설정하더라도 아무런 의미 없다.

### input 태그와 입력 값
  - <input name='v1'> 태그에 입력된 값을 지정하는 방법

  - var xV1 = document.querySelector("input[name='v1']")
  - xV1.value => 입력값

### Front-end 핵심 API

#### DOM API (Document Object Model)
  
  - 태그를 찾고, 태그의 속성/값/내용을 별경, 태그를 제거 등

    - 태그 찾기 
      - document.getElementById(태그아이디) => 태그 객체 1개
      - document.getElementByName(태그명) => 여러 개의 태그
      - document.getElementByClassName(클래스명) => 여러 개의 태그
      - document.querySelector(css 셀렉터 -> 한 개의 태그 객체
      - document.querySelectorAll(css 셀렉터 -> 여러 개의 태그 객체
    - 태그 생성
      - document.createElement(태그명) => 태그 객체 1개
      - document.createTextNode(내용) => 콘텐트 객체 1개
    - 자식 태그 추가/삭제
      - Node.appendChild(태그 객체) => 다른 태그 아래에 자식 태그 추가
      - Node.removeChild(태그 객체) => 자식 태그 제거
    - 태그 콘텐트 설정
      - Node.textContent = 내용(=내용 안에 태그가 있다면 무시한다) => 태그의 콘텐트 설정
      - Node.textContent = 내용(=내용 안에 태그가 있다면 자식 태그로 처리한다) => 태그의 콘텐트 설정
    - 폼 입력 태그의 값 설정
      - HTMLInputElement.value = 입력값
      - HTMLSelectElement.value = 선택한 옵션 값
  
#### 태그의 이벤트 처리
  
  - 태그에 대해 특정 이벤트가 발생했을 때 호출될 함수를 등록
  
  - 호출될 함수 : 개발자가 웹브라우저에서 호출되도록 설정해놓은 함수
      - 'callback 함수' = event listener(리스너) = 특정 이벤트에 귀를 기울인다 = event handler
  
  - 태그.onclick = function() {...}
    - onclick : 이벤트 핸들러의 이름 = 이미 태그에 대해 이름이 정해져있다.
    - function : 이벤트가 발생하면 호출된다
  - 태그.addEventListener("click", function(){...})
  - <태그 onclick = "자브스크립트 코드"> : 이벤트가 발생하면 설정된 코드 실행

#### AJAX(Asynchronous JavaScript And XML) API
    
    - 별도의 서버 요청 작업을 수행할 때 사용
  
  - var xhr = new XMLHttpRequest()
  - xhr.addEventListener('load', function(){...}) : 신규 프로젝트 
    - load : 서버에서 응답이 오면 발생하는 이벤트
    - function() : 응답이 왔을 때 호출될 함수 => 서버가 보낸 실행 결과를 처리
  - xhr.onreadystatechange = function() {...}
    - xhr.open("GET", URL, 비동기 여부) : 서버에 연결
    - xhr.send(쿼리 스트링 / null) : 서버에 요청

### CSS Selector

  - 태그를 가리키는 명령 (파일 경로와 비슷)

  ```
  <h1 id 'x-title' class='t1 t2'></h1>
  <h1 id 'x-name' class='t1 t3'></h1>
  <h1 id 'x-tel' class='t2'></h1>
  ```

  ```
  <style>
  #x-title{
  }
  </style>
  <style>
  h1{
  }
  </style>
  <style>
  .t2{
  }
  </style>
  ```
  
  같은 식으로 사용
  
### 스프링 부트에서 결과 리턴 과정

  1. 웹 브라우저에서 스프링부트에 요청
  2. 스프링부트는 Exam4/test3() 호출
    - test3() : "요청 처리기(request handler)" => 요청이 들어왔을 때 호출되는 메서드
    - Exam4 : "페이지 컨트롤러" => reqeust handler를 갖고 있는 클래스 => 요청을 처리하고 역할을 수행
  3.  Exam4 에서 요청 내용을 실행
  4.  결과 값 스프링부트로 리턴
  5.  리턴 값을 Message Converter에 보낸다.
    - Message Converter : 응답할 데이터 가공, 요청으로 받은 데이터 가공
  6.  Message Converterdpter 에서 리턴값을 가공한다
    - 문자열, 자바 원시 타입 데이터을 가공 => 문자열
    - 배열, 객체 가공 => JSON 형식의 문자열
  7.  가공한 값 스프링 부트로 리턴
  8.  웹 브라우저로 응답

### 배열에서 JSON 문자열로 가공되는 결과 값 확인

  - new String[]{"aaa","bbb","ccc"} => ["aaa", "bbb", "ccc"]
  - new int[]{100, 200, 300} => [100, 200, 300]

### JSON 형식의 문자열

  - App 간에 데이터를 주고 받을 때 사용하는 데이터 형식
    - JavaScript Object Notation
    - JavaScript의 객체 초기화 문법 (Object initializer)을 모방해서 만든 데이터 형식 => json.org 사이트 참조
    
    - object initializer와 JSON 차이
      - 문자열
        - object initializer : "-" 또는 '-'
        - JSON : "-" 만 허용
      - 프로퍼티명
        - object initializer : "프로퍼티명" 또는 '프로퍼티명'
        - JSON : "프로퍼티명" 만 허용
     - 배열과 객체 차이
      - 배열 : [값, 값, 값]
      - 객체 : { "프로퍼티명": 값, "프로퍼티명": 값}

### 자원과 그 자원을 가리키는 주소
  
  - 자원 : resource
  - 자원의 주소 : Uniform Resource Locator
    
#### 정적 자원
 
  - static resource
  - 주소+파일 경로로 요청하면 파일을 그대로 리턴
    
#### 동적 자원

  - dynamic resource
  - 주소+프로그램 경로로 요청 => 프로그램을 실행한 후 그 결과를 리턴 => 실행할 때마다 결과가 바뀔 수 있음
    
### function chain

  - f1().f2().f3()
    - f1()의 결과를 받아 f2()의 기능 수행 후 리턴 f2의 기능 수행 후 결과 값으로 f3에서 수행
    - f1() => f1.f2() => f2.f3()

### fetch() chain

  - fetch().then(cb).then(cb) ...
    - fetch() : AJAX 요청
    - fetch.then() : 응답 결과 전달 및 함수 호출
    - then().then() : 전달받은 결과값으로 작업 완료 후 다음 작업 호출
